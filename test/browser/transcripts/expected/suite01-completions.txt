automate         open-tab-with-scenario! completions
automate         [:chromex.ext.commands/on-command ["open-dirac-devtools" {:reset-settings 1}]]
extension        handling command: open-dirac-devtools
extension        register devtools #1
devtools #1      implant initialized
devtools #1      devtools ready
devtools #1      setCurrentPanel: elements
automate #1      {:action :switch-inspector-panel, :panel :console}
devtools #1      console initialized
devtools #1      adopt-prompt-element use-parinfer? true
devtools #1      setDiracPromptMode('status')
devtools #1      ConsoleView constructed
automate #1      {:action :switch-to-dirac-prompt}
devtools #1      setCurrentPanel: console
devtools #1      switch console prompt to dirac
devtools #1      console prompt focused
devtools #1      repl initialized
devtools #1      setDiracPromptStatusContent('Dirac Agent connected. Bootstrapping ClojureScript REPL...')
devtools #1      setDiracPromptStatusStyle('info')
devtools #1      setDiracPromptNS('cljs.user')
devtools #1      wrap-with-postprocess-and-eval-in-current-context!
devtools #1      wrap-with-postprocess-and-eval-in-current-context!
devtools #1      repl eval job ended
devtools #1      setDiracPromptMode('edit')
automate #1      {:action :enable-console-feedback}
devtools #1      console prompt focused
automate #1      {:action :dispatch-console-prompt-input, :input "(in-ns 'dirac.tests.scenarios.completions.workspace)"}
automate #1      {:action :dispatch-console-prompt-action, :input "enter"}
devtools #1      DC.log> (in-ns 'dirac.tests.scenarios.completions.workspace)
devtools #1      send-eval-request: (in-ns 'dirac.tests.scenarios.completions.workspace)
devtools #1      repl eval job started
devtools #1      wrap-with-postprocess-and-eval-in-current-context!
devtools #1      setDiracPromptNS('dirac.tests.scenarios.completions.workspace')
devtools #1      repl eval job ended
automate #1      {:action :dispatch-console-prompt-input, :input "sample"}
automate #1      {:action :dispatch-console-prompt-action, :input "backspace"}