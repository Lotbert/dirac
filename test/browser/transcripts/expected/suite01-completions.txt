ns               Testing dirac.tests.tasks.suite01.completions
automate         open-tab-with-scenario! ["completions"]
automate         open-devtools!
extension        handling command: open-dirac-devtools
extension        register devtools #1
devtools #1      implant initialized
devtools #1      reset devtools settings
devtools #1      devtools ready
devtools #1      setCurrentPanel: elements
automate #1      switch-to-console-panel!
devtools #1      console initialized
devtools #1      adopt-prompt-element use-parinfer? true
devtools #1      setDiracPromptMode('status')
devtools #1      ConsoleView constructed
devtools #1      displayWelcomeMessage
devtools #1      setCurrentPanel: console
automate #1      switch-prompt-to-dirac!
devtools #1      switched console prompt to 'dirac'
devtools #1      repl initialized
devtools #1      setDiracPromptStatusContent('Checking for Dirac Runtime presence in your app...')
devtools #1      setDiracPromptStatusStyle('info')
devtools #1      setDiracPromptStatusContent('Dirac Agent connected. Bootstrapping ClojureScript REPL...')
devtools #1      setDiracPromptNS('cljs.user')
devtools #1      wrap-with-postprocess-and-eval-in-current-context!
devtools #1      wrap-with-postprocess-and-eval-in-current-context!
devtools #1      setDiracPromptMode('edit')
automate #1      enable-console-feedback!
automate #1      console-exec-and-match! ["(in-ns 'dirac.tests.scenarios.completions.workspace)" "setDiracPromptNS('dirac.tests.scenarios.completions.workspace')"]
devtools #1      DC.log> (in-ns 'dirac.tests.scenarios.completions.workspace)
devtools #1      send-eval-request: (in-ns 'dirac.tests.scenarios.completions.workspace)
devtools #1      repl eval job started
devtools #1      wrap-with-postprocess-and-eval-in-current-context!
devtools #1      setDiracPromptNS('dirac.tests.scenarios.completions.workspace')
devtools #1      repl eval job ended
automate #1      simulate-console-input! ["sample"]
automate #1      scrape! [:suggest-box]
stdout           displayed 3 items:
                  * sample|-def (in-ns selected)
                  * sample|-defn (in-ns)
                  * sample|-defonce (in-ns)
automate #1      clear-console-prompt!
automate #1      simulate-console-input! ["js/docume"]
automate #1      scrape! [:suggest-box]
stdout           displayed 1 items:
                  * docume|nt (selected)
automate #1      simulate-console-action! ["TAB"]
automate #1      print-prompt!
stdout           js/document
automate #1      simulate-console-input! [".get"]
automate #1      scrape! [:suggest-box]
stdout           displayed 6 items:
                  * get|ElementById (selected)
                  * get|ElementsByClassName
                  * get|ElementsByName
                  * get|ElementsByTagName
                  * get|ElementsByTagNameNS
                  * get|Selection
automate #1      simulate-console-action! ["TAB"]
automate #1      print-prompt!
stdout           js/document.getElementById
automate #1      clear-console-prompt!
automate #1      simulate-console-input! ["cljs.core/part"]
automate #1      scrape! [:suggest-box]
stdout           displayed 4 items:
                  * part|ial (qualified selected)
                  * part|ition (qualified)
                  * part|ition-all (qualified)
                  * part|ition-by (qualified)
automate #1      simulate-console-action! ["TAB"]
automate #1      print-prompt!
stdout           cljs.core/partial
automate #1      clear-console-prompt!
automate #1      simulate-console-input! ["devtools."]
automate #1      scrape! [:suggest-box]
stdout           displayed 9 items:
                  * devtools.|core (ns selected)
                  * devtools.|custom-formatters (ns)
                  * devtools.|format (ns)
                  * devtools.|prefs (ns)
                  * devtools.|sanity-hints (ns)
                  * devtools.|util (ns)
                  * devtools.|util (ns macro aliased)
                  * devtools.|version (ns)
                  * devtools.|version (ns macro aliased)
automate #1      simulate-console-action! ["DOWN"]
automate #1      simulate-console-action! ["TAB"]
automate #1      print-prompt!
stdout           devtools.custom-formatters
automate #1      clear-console-prompt!
automate #1      simulate-console-input! ["cljs.cor"]
automate #1      scrape! [:suggest-box]
stdout           displayed 11 items:
                  * cljs.cor|e (ns selected)
                  * cljs.cor|e (ns macro aliased)
                  * cljs.cor|e.async (ns)
                  * cljs.cor|e.async.impl.buffers (ns)
                  * cljs.cor|e.async.impl.channels (ns)
                  * cljs.cor|e.async.impl.dispatch (ns)
                  * cljs.cor|e.async.impl.ioc-helpers (ns)
                  * cljs.cor|e.async.impl.ioc-macros (ns macro)
                  * cljs.cor|e.async.impl.protocols (ns)
                  * cljs.cor|e.async.impl.timers (ns)
                  * cljs.cor|e.async.macros (ns macro)
automate #1      simulate-console-action! ["RIGHT"]
automate #1      print-prompt!
stdout           cljs.core
automate #1      simulate-console-input! ["/clj-"]
automate #1      scrape! [:suggest-box]
stdout           displayed 1 items:
                  * clj-|>js (qualified selected)
automate #1      simulate-console-action! ["RIGHT"]
automate #1      print-prompt!
stdout           cljs.core/clj->js
automate #1      clear-console-prompt!
automate #1      get-suggest-box-item-count
automate #1      simulate-console-action! ["CTRL+SPACE"]
automate #1      get-suggest-box-item-count
automate #1      clear-console-prompt!
automate #1      simulate-console-input! ["alias"]
automate #1      scrape! [:suggest-box]
stdout           displayed 4 items:
                  * alias|-cljs-core-async [as cljs.core.async] (suggest-ns-alias selected)
                  * alias|-cljs-core-async-macros [as cljs.core.async.macros] (suggest-ns-alias macro)
                  * alias|-dirac-settings [as dirac.settings] (suggest-ns-alias)
                  * alias|-dirac-settings [as dirac.settings] (suggest-ns-alias macro aliased)
automate #1      clear-console-prompt!
automate #1      simulate-console-input! ["pu"]
automate #1      scrape! [:suggest-box]
stdout           displayed 2 items:
                  * pu|sh-tail (core selected)
                  * pu|t! [in cljs.core.async] (suggest-refer)
automate #1      clear-console-prompt!
automate #1      simulate-console-input! ["wa"]
automate #1      scrape! [:suggest-box]
stdout           displayed 1 items:
                  * wa|rn [in chromex.logging] (suggest-refer macro selected)
automate #1      clear-console-prompt!
automate #1      simulate-console-input! ["get-dirac-window"]
automate #1      scrape! [:suggest-box]
stdout           displayed 1 items:
                  * get-dirac-window|-top [in dirac.settings] (suggest-refer macro selected)
automate #1      clear-console-prompt!
automate #1      simulate-console-input! ["alias-cljs-core-async/tak"]
automate #1      scrape! [:suggest-box]
stdout           displayed 2 items:
                  * tak|e (qualified selected)
                  * tak|e! (qualified)
automate #1      clear-console-prompt!
automate #1      simulate-console-input! ["alias-cljs-core-async-macros/go"]
automate #1      scrape! [:suggest-box]
stdout           displayed 2 items:
                  * go| (qualified macro selected)
                  * go|-loop (qualified macro)
automate #1      clear-console-prompt!
automate #1      simulate-console-input! ["chromex.logging/lo"]
automate #1      scrape! [:suggest-box]
stdout           displayed 1 items:
                  * lo|g (qualified macro selected)
automate #1      clear-console-prompt!
automate #1      simulate-console-input! ["dirac"]
automate #1      scrape [:suggest-box]
automate #1      clear-console-prompt!
automate #1      simulate-console-input! ["impor"]
automate #1      scrape [:suggest-box]
automate #1      clear-console-prompt!
automate #1      simulate-console-input! ["in-"]
automate #1      scrape [:suggest-box]
automate #1      clear-console-prompt!
automate #1      simulate-console-input! ["requi"]
automate #1      scrape [:suggest-box]
automate #1      clear-console-prompt!
automate #1      simulate-console-input! ["*"]
automate #1      scrape [:suggest-box]
automate #1      clear-console-prompt!
automate #1      simulate-console-input! ["load-"]
automate #1      scrape [:suggest-box]
automate #1      close-devtools!
extension        handling command: close-dirac-devtools
extension        unregister devtools #1
automate         close-tab-with-scenario! ["scenario-tab#1"]
summary          Automated 82 actions with 1 check-points containing 18 assertions.
                 0 failures, 0 errors.
