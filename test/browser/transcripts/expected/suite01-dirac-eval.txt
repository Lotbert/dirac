automate         open-tab-with-scenario! normal
automate         [:chromex.ext.commands/on-command ["open-dirac-devtools" {:reset-settings 1}]]
extension        handling command: open-dirac-devtools
extension        register devtools #1
devtools #1      implant initialized
devtools #1      devtools ready
devtools #1      setCurrentPanel: elements
automate #1      {:action :switch-inspector-panel, :panel :console}
devtools #1      console initialized
automate #1      {:action :switch-to-dirac-prompt}
devtools #1      adopt-prompt-element use-parinfer? true
devtools #1      setDiracPromptMode('status')
devtools #1      setCurrentPanel: console
devtools #1      switch console prompt to dirac
devtools #1      console prompt focused
devtools #1      repl initialized
devtools #1      setDiracPromptStatusContent('Dirac Agent connected. Bootstrapping ClojureScript REPL...')
devtools #1      setDiracPromptStatusStyle('info')
devtools #1      setDiracPromptNS('cljs.user')
devtools #1      wrap-with-postprocess-and-eval-in-current-context!
devtools #1      wrap-with-postprocess-and-eval-in-current-context!
devtools #1      setDiracPromptMode('edit')
automate #1      {:action :enable-console-feedback}
devtools #1      console prompt focused
automate #1      {:action :dispatch-console-prompt-input, :input "(+ 1 2)"}
automate #1      {:action :dispatch-console-prompt-action, :input "enter"}
devtools #1      DC.log> (+ 1 2)
devtools #1      send-eval-request: (+ 1 2)
devtools #1      wrap-with-postprocess-and-eval-in-current-context!
devtools #1      DF.log> 3
automate #1      {:action :dispatch-console-prompt-input, :input "(range 200)"}
automate #1      {:action :dispatch-console-prompt-action, :input "enter"}
devtools #1      DC.log> (range 200)
devtools #1      send-eval-request: (range 200)
devtools #1      wrap-with-postprocess-and-eval-in-current-context!
devtools #1      DF.log> (0 1 2 3 4 …)
automate #1      {:action :dispatch-console-prompt-input, :input "(doc filter)"}
automate #1      {:action :dispatch-console-prompt-action, :input "enter"}
devtools #1      DC.log> (doc filter)
devtools #1      send-eval-request: (doc filter)
devtools #1      wrap-with-postprocess-and-eval-in-current-context!
devtools #1      DF.log>
                 -------------------------
                 cljs.core/filter
                 ([pred] [pred coll])
                   Returns a lazy sequence of the items in coll for which
                   (pred item) returns true. pred must be free of side-effects.
                   Returns a transducer when no collection is provided.
devtools #1      DF.log> null
automate #1      {:action :dispatch-console-prompt-input, :input "js/dirac"}
automate #1      {:action :dispatch-console-prompt-action, :input "enter"}
devtools #1      DC.log> js/dirac
devtools #1      send-eval-request: js/dirac
devtools #1      wrap-with-postprocess-and-eval-in-current-context!
devtools #1      DF.log> Object {automation: Object, tests: Object, runtime: Object, project: Object}
automate #1      {:action :dispatch-console-prompt-input, :input "(x)"}
automate #1      {:action :dispatch-console-prompt-action, :input "enter"}
devtools #1      DC.log> (x)
devtools #1      send-eval-request: (x)
devtools #1      present-server-side-output! stderr > WARNING: Use of undeclared Var cljs.user/x at line 1 <dirac repl>
devtools #1      DF.wrn> Use of undeclared Var cljs.user/x at line 1 <dirac repl>
devtools #1      wrap-with-postprocess-and-eval-in-current-context!
devtools #1      DF.err> TypeError: Cannot read property 'call' of undefined(…)
automate #1      {:action :dispatch-console-prompt-input, :input "(in-ns)"}
automate #1      {:action :dispatch-console-prompt-action, :input "enter"}
devtools #1      DC.log> (in-ns)
devtools #1      send-eval-request: (in-ns)
devtools #1      present-server-side-output! java-trace > java.lang.IllegalArgumentException: Argument to in-ns must be a symbol.
                 <elided stack trace>
devtools #1      DF.log> java.lang.IllegalArgumentException: Argument to in-ns must be a symbol.
automate #1      {:action :dispatch-console-prompt-input, :input "(in-ns 'my.ns)"}
devtools #1      <elided stack trace log>
devtools #1      JS.log>
automate #1      {:action :dispatch-console-prompt-action, :input "enter"}
devtools #1      DC.log> (in-ns 'my.ns)
devtools #1      send-eval-request: (in-ns 'my.ns)
devtools #1      wrap-with-postprocess-and-eval-in-current-context!
devtools #1      setDiracPromptNS('my.ns')